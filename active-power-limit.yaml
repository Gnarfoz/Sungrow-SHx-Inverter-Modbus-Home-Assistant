template:
  - sensor:
      - name: Active power limit mode
        unique_id: sg_active_power_limit_mode
        availability: "{{ not is_state('sensor.active_power_limit_mode_raw', 'unavailable') }}"
        device_class: enum
        state: >-
          {% if ((states('sensor.active_power_limit_mode_raw') |int) == 0x00AA) %}
            Enabled
          {% elif ((states('sensor.active_power_limit_mode_raw') |int) == 0x0055) %}
            Disabled
          {% else %}
            Unknown - should not see me! code: {{ (states('sensor.active_power_limit_mode_raw') |int) }}
          {% endif %}

modbus:
  - sensors:
      - name: Active power limit
        unique_id: sg_active_power_limit
        device_address: !secret sungrow_modbus_slave
        address: 13089 # reg 13090
        input_type: holding
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Active power limit mode raw
        unique_id: sg_active_power_limit_mode_raw
        device_address: !secret sungrow_modbus_slave
        address: 13088 # reg 13089
        input_type: holding
        data_type: uint16
        state_class: measurement
        scan_interval: 10

input_number:
  set_sg_active_power_limit:
    name: Active power limit (%)
    min: 0
    max: 100
    mode: box

input_select:
  set_sg_active_power_limit_mode:
    name: Active power limit mode
    options:
      - "Enabled"
      - "Disabled"
  
automation:
  - id: "automation_sungrow_inverter_active_power_limit_mode"
    alias: "sungrow inverter active power limit mode"
    description: "Set active power limit mode"
    triggers:
      - trigger: state
        entity_id:
          - input_select.set_sg_active_power_limit_mode
    conditions: []
    variables:
      active_power_limit_enable: 0xAA
      active_power_limit_disable: 0x55
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: !secret sungrow_modbus_slave
          address: 13088 # reg 13089
          value: >
            {% if is_state('input_select.set_sg_active_power_limit_mode', "Enabled") %} 
              {{active_power_limit_enable}}
            {% elif is_state('input_select.set_sg_active_power_limit_mode', "Disabled") %}
              {{active_power_limit_disable}}
            {% else %}
              {{active_power_limit_disable}}
            {% endif %}
      - action: homeassistant.update_entity
        # immediate update the sensor to reflect the new value, not waiting for the next scheduled update
        data:
          entity_id:
            - sensor.active_power_limit_mode_raw
    mode: single

  - id: "automation_sungrow_inverter_active_power_limit_mode_update"
    alias: "sungrow inverter active power limit mode update"
    description: "Updates Enable/Disable for active power limit mode"
    triggers:
      - trigger: state
        entity_id:
          - sensor.active_power_limit_mode_raw
    conditions:
      - condition: template
        value_template: "{{ not is_state('sensor.active_power_limit_mode_raw', 'unavailable') }}"
    actions:
      - action: input_select.select_option
        target:
          entity_id: input_select.set_sg_active_power_limit_mode
        data:
          option: >
            {% if ((states('sensor.active_power_limit_mode_raw') |int) == 0x00AA) %} 
              Enabled
            {% elif ((states('sensor.active_power_limit_mode_raw') |int) == 0x0055) %} 
              Disabled
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_set_active_power_limit"
    alias: "sungrow inverter active power limit"
    description: "Sets active power limit"
    triggers:
      - trigger: state
        entity_id:
          - input_number.set_sg_active_power_limit
    conditions: []
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: !secret sungrow_modbus_slave
          address: 13089 # reg 13090
          value: "{{ states('input_number.set_sg_active_power_limit') | int * 10 }}"
      - action: homeassistant.update_entity
        # immediate update the sensor to reflect the new value, not waiting for the next scheduled update
        data:
          entity_id:
            - sensor.active_power_limit
    mode: single

  - id: "automation_sungrow_inverter_active_power_limit_update"
    alias: "sungrow inverter active power limit update"
    description: "Updates active power limit input"
    triggers:
      - trigger: state
        entity_id:
          - sensor.active_power_limit
    conditions: []
    actions:
      - action: input_number.set_value
        target:
          entity_id: input_number.set_sg_active_power_limit
        data:
          value: "{{ states('sensor.active_power_limit') }}"
    mode: single
